// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AmazonUPS.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AmazonUPS.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* AConnectedToSim_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AConnectedToSim_reflection_ = NULL;
const ::google::protobuf::Descriptor* UConnectedToSim_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UConnectedToSim_reflection_ = NULL;
const ::google::protobuf::Descriptor* pkgInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pkgInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* sendTruck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sendTruck_reflection_ = NULL;
const ::google::protobuf::Descriptor* truckArrived_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  truckArrived_reflection_ = NULL;
const ::google::protobuf::Descriptor* dispatchTruck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dispatchTruck_reflection_ = NULL;
const ::google::protobuf::Descriptor* packageDelivered_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packageDelivered_reflection_ = NULL;
const ::google::protobuf::Descriptor* UPStoAmazon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UPStoAmazon_reflection_ = NULL;
const ::google::protobuf::Descriptor* AmazontoUPS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AmazontoUPS_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_AmazonUPS_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_AmazonUPS_2eproto() {
  protobuf_AddDesc_AmazonUPS_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AmazonUPS.proto");
  GOOGLE_CHECK(file != NULL);
  AConnectedToSim_descriptor_ = file->message_type(0);
  static const int AConnectedToSim_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AConnectedToSim, worldid_),
  };
  AConnectedToSim_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AConnectedToSim_descriptor_,
      AConnectedToSim::default_instance_,
      AConnectedToSim_offsets_,
      -1,
      -1,
      -1,
      sizeof(AConnectedToSim),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AConnectedToSim, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AConnectedToSim, _is_default_instance_));
  UConnectedToSim_descriptor_ = file->message_type(1);
  static const int UConnectedToSim_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UConnectedToSim, worldid_),
  };
  UConnectedToSim_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UConnectedToSim_descriptor_,
      UConnectedToSim::default_instance_,
      UConnectedToSim_offsets_,
      -1,
      -1,
      -1,
      sizeof(UConnectedToSim),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UConnectedToSim, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UConnectedToSim, _is_default_instance_));
  pkgInfo_descriptor_ = file->message_type(2);
  static const int pkgInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pkgInfo, packageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pkgInfo, delx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pkgInfo, dely_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pkgInfo, upsacccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pkgInfo, description_),
  };
  pkgInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      pkgInfo_descriptor_,
      pkgInfo::default_instance_,
      pkgInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(pkgInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pkgInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pkgInfo, _is_default_instance_));
  sendTruck_descriptor_ = file->message_type(3);
  static const int sendTruck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sendTruck, whid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sendTruck, whx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sendTruck, why_),
  };
  sendTruck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      sendTruck_descriptor_,
      sendTruck::default_instance_,
      sendTruck_offsets_,
      -1,
      -1,
      -1,
      sizeof(sendTruck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sendTruck, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sendTruck, _is_default_instance_));
  truckArrived_descriptor_ = file->message_type(4);
  static const int truckArrived_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(truckArrived, whid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(truckArrived, truckid_),
  };
  truckArrived_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      truckArrived_descriptor_,
      truckArrived::default_instance_,
      truckArrived_offsets_,
      -1,
      -1,
      -1,
      sizeof(truckArrived),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(truckArrived, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(truckArrived, _is_default_instance_));
  dispatchTruck_descriptor_ = file->message_type(5);
  static const int dispatchTruck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dispatchTruck, truckid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dispatchTruck, packages_),
  };
  dispatchTruck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      dispatchTruck_descriptor_,
      dispatchTruck::default_instance_,
      dispatchTruck_offsets_,
      -1,
      -1,
      -1,
      sizeof(dispatchTruck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dispatchTruck, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dispatchTruck, _is_default_instance_));
  packageDelivered_descriptor_ = file->message_type(6);
  static const int packageDelivered_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packageDelivered, packageid_),
  };
  packageDelivered_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      packageDelivered_descriptor_,
      packageDelivered::default_instance_,
      packageDelivered_offsets_,
      -1,
      -1,
      -1,
      sizeof(packageDelivered),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packageDelivered, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packageDelivered, _is_default_instance_));
  UPStoAmazon_descriptor_ = file->message_type(7);
  static const int UPStoAmazon_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UPStoAmazon, truck_arrived_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UPStoAmazon, delivered_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UPStoAmazon, uconnected_),
  };
  UPStoAmazon_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UPStoAmazon_descriptor_,
      UPStoAmazon::default_instance_,
      UPStoAmazon_offsets_,
      -1,
      -1,
      -1,
      sizeof(UPStoAmazon),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UPStoAmazon, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UPStoAmazon, _is_default_instance_));
  AmazontoUPS_descriptor_ = file->message_type(8);
  static const int AmazontoUPS_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmazontoUPS, send_truck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmazontoUPS, dispatch_truck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmazontoUPS, aconnected_),
  };
  AmazontoUPS_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AmazontoUPS_descriptor_,
      AmazontoUPS::default_instance_,
      AmazontoUPS_offsets_,
      -1,
      -1,
      -1,
      sizeof(AmazontoUPS),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmazontoUPS, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmazontoUPS, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AmazonUPS_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AConnectedToSim_descriptor_, &AConnectedToSim::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UConnectedToSim_descriptor_, &UConnectedToSim::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      pkgInfo_descriptor_, &pkgInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      sendTruck_descriptor_, &sendTruck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      truckArrived_descriptor_, &truckArrived::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      dispatchTruck_descriptor_, &dispatchTruck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      packageDelivered_descriptor_, &packageDelivered::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UPStoAmazon_descriptor_, &UPStoAmazon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AmazontoUPS_descriptor_, &AmazontoUPS::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AmazonUPS_2eproto() {
  delete AConnectedToSim::default_instance_;
  delete AConnectedToSim_reflection_;
  delete UConnectedToSim::default_instance_;
  delete UConnectedToSim_reflection_;
  delete pkgInfo::default_instance_;
  delete pkgInfo_reflection_;
  delete sendTruck::default_instance_;
  delete sendTruck_reflection_;
  delete truckArrived::default_instance_;
  delete truckArrived_reflection_;
  delete dispatchTruck::default_instance_;
  delete dispatchTruck_reflection_;
  delete packageDelivered::default_instance_;
  delete packageDelivered_reflection_;
  delete UPStoAmazon::default_instance_;
  delete UPStoAmazon_reflection_;
  delete AmazontoUPS::default_instance_;
  delete AmazontoUPS_reflection_;
}

void protobuf_AddDesc_AmazonUPS_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_AmazonUPS_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017AmazonUPS.proto\"\"\n\017AConnectedToSim\022\017\n\007"
    "worldid\030\001 \001(\003\"\"\n\017UConnectedToSim\022\017\n\007worl"
    "did\030\001 \001(\003\"b\n\007pkgInfo\022\021\n\tpackageid\030\001 \001(\003\022"
    "\014\n\004delX\030\002 \001(\005\022\014\n\004delY\030\003 \001(\005\022\023\n\013upsAcccou"
    "nt\030\004 \001(\003\022\023\n\013description\030\005 \001(\t\"3\n\tsendTru"
    "ck\022\014\n\004whid\030\001 \001(\005\022\013\n\003whX\030\002 \001(\005\022\013\n\003whY\030\003 \001"
    "(\005\"-\n\014truckArrived\022\014\n\004whid\030\001 \001(\005\022\017\n\007truc"
    "kid\030\002 \001(\005\"<\n\rdispatchTruck\022\017\n\007truckid\030\001 "
    "\001(\005\022\032\n\010packages\030\002 \003(\0132\010.pkgInfo\"%\n\020packa"
    "geDelivered\022\021\n\tpackageid\030\001 \001(\003\"\177\n\013UPStoA"
    "mazon\022$\n\rtruck_arrived\030\001 \003(\0132\r.truckArri"
    "ved\022$\n\tdelivered\030\002 \003(\0132\021.packageDelivere"
    "d\022$\n\nuconnected\030\003 \003(\0132\020.UConnectedToSim\""
    "{\n\013AmazontoUPS\022\036\n\nsend_truck\030\001 \003(\0132\n.sen"
    "dTruck\022&\n\016dispatch_truck\030\002 \003(\0132\016.dispatc"
    "hTruck\022$\n\naconnected\030\003 \003(\0132\020.AConnectedT"
    "oSimb\006proto3", 652);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AmazonUPS.proto", &protobuf_RegisterTypes);
  AConnectedToSim::default_instance_ = new AConnectedToSim();
  UConnectedToSim::default_instance_ = new UConnectedToSim();
  pkgInfo::default_instance_ = new pkgInfo();
  sendTruck::default_instance_ = new sendTruck();
  truckArrived::default_instance_ = new truckArrived();
  dispatchTruck::default_instance_ = new dispatchTruck();
  packageDelivered::default_instance_ = new packageDelivered();
  UPStoAmazon::default_instance_ = new UPStoAmazon();
  AmazontoUPS::default_instance_ = new AmazontoUPS();
  AConnectedToSim::default_instance_->InitAsDefaultInstance();
  UConnectedToSim::default_instance_->InitAsDefaultInstance();
  pkgInfo::default_instance_->InitAsDefaultInstance();
  sendTruck::default_instance_->InitAsDefaultInstance();
  truckArrived::default_instance_->InitAsDefaultInstance();
  dispatchTruck::default_instance_->InitAsDefaultInstance();
  packageDelivered::default_instance_->InitAsDefaultInstance();
  UPStoAmazon::default_instance_->InitAsDefaultInstance();
  AmazontoUPS::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AmazonUPS_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AmazonUPS_2eproto {
  StaticDescriptorInitializer_AmazonUPS_2eproto() {
    protobuf_AddDesc_AmazonUPS_2eproto();
  }
} static_descriptor_initializer_AmazonUPS_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AConnectedToSim::kWorldidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AConnectedToSim::AConnectedToSim()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AConnectedToSim)
}

void AConnectedToSim::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AConnectedToSim::AConnectedToSim(const AConnectedToSim& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AConnectedToSim)
}

void AConnectedToSim::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  worldid_ = GOOGLE_LONGLONG(0);
}

AConnectedToSim::~AConnectedToSim() {
  // @@protoc_insertion_point(destructor:AConnectedToSim)
  SharedDtor();
}

void AConnectedToSim::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AConnectedToSim::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AConnectedToSim::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AConnectedToSim_descriptor_;
}

const AConnectedToSim& AConnectedToSim::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AmazonUPS_2eproto();
  return *default_instance_;
}

AConnectedToSim* AConnectedToSim::default_instance_ = NULL;

AConnectedToSim* AConnectedToSim::New(::google::protobuf::Arena* arena) const {
  AConnectedToSim* n = new AConnectedToSim;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AConnectedToSim::Clear() {
// @@protoc_insertion_point(message_clear_start:AConnectedToSim)
  worldid_ = GOOGLE_LONGLONG(0);
}

bool AConnectedToSim::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AConnectedToSim)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 worldid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &worldid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AConnectedToSim)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AConnectedToSim)
  return false;
#undef DO_
}

void AConnectedToSim::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AConnectedToSim)
  // optional int64 worldid = 1;
  if (this->worldid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->worldid(), output);
  }

  // @@protoc_insertion_point(serialize_end:AConnectedToSim)
}

::google::protobuf::uint8* AConnectedToSim::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AConnectedToSim)
  // optional int64 worldid = 1;
  if (this->worldid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->worldid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:AConnectedToSim)
  return target;
}

int AConnectedToSim::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AConnectedToSim)
  int total_size = 0;

  // optional int64 worldid = 1;
  if (this->worldid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->worldid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AConnectedToSim::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AConnectedToSim)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AConnectedToSim* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AConnectedToSim>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AConnectedToSim)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AConnectedToSim)
    MergeFrom(*source);
  }
}

void AConnectedToSim::MergeFrom(const AConnectedToSim& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AConnectedToSim)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.worldid() != 0) {
    set_worldid(from.worldid());
  }
}

void AConnectedToSim::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AConnectedToSim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AConnectedToSim::CopyFrom(const AConnectedToSim& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AConnectedToSim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AConnectedToSim::IsInitialized() const {

  return true;
}

void AConnectedToSim::Swap(AConnectedToSim* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AConnectedToSim::InternalSwap(AConnectedToSim* other) {
  std::swap(worldid_, other->worldid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AConnectedToSim::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AConnectedToSim_descriptor_;
  metadata.reflection = AConnectedToSim_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AConnectedToSim

// optional int64 worldid = 1;
void AConnectedToSim::clear_worldid() {
  worldid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 AConnectedToSim::worldid() const {
  // @@protoc_insertion_point(field_get:AConnectedToSim.worldid)
  return worldid_;
}
 void AConnectedToSim::set_worldid(::google::protobuf::int64 value) {
  
  worldid_ = value;
  // @@protoc_insertion_point(field_set:AConnectedToSim.worldid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UConnectedToSim::kWorldidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UConnectedToSim::UConnectedToSim()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UConnectedToSim)
}

void UConnectedToSim::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UConnectedToSim::UConnectedToSim(const UConnectedToSim& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UConnectedToSim)
}

void UConnectedToSim::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  worldid_ = GOOGLE_LONGLONG(0);
}

UConnectedToSim::~UConnectedToSim() {
  // @@protoc_insertion_point(destructor:UConnectedToSim)
  SharedDtor();
}

void UConnectedToSim::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UConnectedToSim::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UConnectedToSim::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UConnectedToSim_descriptor_;
}

const UConnectedToSim& UConnectedToSim::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AmazonUPS_2eproto();
  return *default_instance_;
}

UConnectedToSim* UConnectedToSim::default_instance_ = NULL;

UConnectedToSim* UConnectedToSim::New(::google::protobuf::Arena* arena) const {
  UConnectedToSim* n = new UConnectedToSim;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UConnectedToSim::Clear() {
// @@protoc_insertion_point(message_clear_start:UConnectedToSim)
  worldid_ = GOOGLE_LONGLONG(0);
}

bool UConnectedToSim::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UConnectedToSim)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 worldid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &worldid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UConnectedToSim)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UConnectedToSim)
  return false;
#undef DO_
}

void UConnectedToSim::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UConnectedToSim)
  // optional int64 worldid = 1;
  if (this->worldid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->worldid(), output);
  }

  // @@protoc_insertion_point(serialize_end:UConnectedToSim)
}

::google::protobuf::uint8* UConnectedToSim::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UConnectedToSim)
  // optional int64 worldid = 1;
  if (this->worldid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->worldid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:UConnectedToSim)
  return target;
}

int UConnectedToSim::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:UConnectedToSim)
  int total_size = 0;

  // optional int64 worldid = 1;
  if (this->worldid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->worldid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UConnectedToSim::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UConnectedToSim)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UConnectedToSim* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UConnectedToSim>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UConnectedToSim)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UConnectedToSim)
    MergeFrom(*source);
  }
}

void UConnectedToSim::MergeFrom(const UConnectedToSim& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UConnectedToSim)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.worldid() != 0) {
    set_worldid(from.worldid());
  }
}

void UConnectedToSim::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UConnectedToSim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UConnectedToSim::CopyFrom(const UConnectedToSim& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UConnectedToSim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UConnectedToSim::IsInitialized() const {

  return true;
}

void UConnectedToSim::Swap(UConnectedToSim* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UConnectedToSim::InternalSwap(UConnectedToSim* other) {
  std::swap(worldid_, other->worldid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UConnectedToSim::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UConnectedToSim_descriptor_;
  metadata.reflection = UConnectedToSim_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UConnectedToSim

// optional int64 worldid = 1;
void UConnectedToSim::clear_worldid() {
  worldid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 UConnectedToSim::worldid() const {
  // @@protoc_insertion_point(field_get:UConnectedToSim.worldid)
  return worldid_;
}
 void UConnectedToSim::set_worldid(::google::protobuf::int64 value) {
  
  worldid_ = value;
  // @@protoc_insertion_point(field_set:UConnectedToSim.worldid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int pkgInfo::kPackageidFieldNumber;
const int pkgInfo::kDelXFieldNumber;
const int pkgInfo::kDelYFieldNumber;
const int pkgInfo::kUpsAcccountFieldNumber;
const int pkgInfo::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

pkgInfo::pkgInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pkgInfo)
}

void pkgInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

pkgInfo::pkgInfo(const pkgInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pkgInfo)
}

void pkgInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  packageid_ = GOOGLE_LONGLONG(0);
  delx_ = 0;
  dely_ = 0;
  upsacccount_ = GOOGLE_LONGLONG(0);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

pkgInfo::~pkgInfo() {
  // @@protoc_insertion_point(destructor:pkgInfo)
  SharedDtor();
}

void pkgInfo::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void pkgInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pkgInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pkgInfo_descriptor_;
}

const pkgInfo& pkgInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AmazonUPS_2eproto();
  return *default_instance_;
}

pkgInfo* pkgInfo::default_instance_ = NULL;

pkgInfo* pkgInfo::New(::google::protobuf::Arena* arena) const {
  pkgInfo* n = new pkgInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void pkgInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pkgInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(pkgInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<pkgInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(packageid_, upsacccount_);
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool pkgInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pkgInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 packageid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &packageid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_delX;
        break;
      }

      // optional int32 delX = 2;
      case 2: {
        if (tag == 16) {
         parse_delX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delx_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_delY;
        break;
      }

      // optional int32 delY = 3;
      case 3: {
        if (tag == 24) {
         parse_delY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dely_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_upsAcccount;
        break;
      }

      // optional int64 upsAcccount = 4;
      case 4: {
        if (tag == 32) {
         parse_upsAcccount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &upsacccount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_description;
        break;
      }

      // optional string description = 5;
      case 5: {
        if (tag == 42) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pkgInfo.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pkgInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pkgInfo)
  return false;
#undef DO_
}

void pkgInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pkgInfo)
  // optional int64 packageid = 1;
  if (this->packageid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->packageid(), output);
  }

  // optional int32 delX = 2;
  if (this->delx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delx(), output);
  }

  // optional int32 delY = 3;
  if (this->dely() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dely(), output);
  }

  // optional int64 upsAcccount = 4;
  if (this->upsacccount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->upsacccount(), output);
  }

  // optional string description = 5;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pkgInfo.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->description(), output);
  }

  // @@protoc_insertion_point(serialize_end:pkgInfo)
}

::google::protobuf::uint8* pkgInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pkgInfo)
  // optional int64 packageid = 1;
  if (this->packageid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->packageid(), target);
  }

  // optional int32 delX = 2;
  if (this->delx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delx(), target);
  }

  // optional int32 delY = 3;
  if (this->dely() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dely(), target);
  }

  // optional int64 upsAcccount = 4;
  if (this->upsacccount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->upsacccount(), target);
  }

  // optional string description = 5;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pkgInfo.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->description(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pkgInfo)
  return target;
}

int pkgInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pkgInfo)
  int total_size = 0;

  // optional int64 packageid = 1;
  if (this->packageid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->packageid());
  }

  // optional int32 delX = 2;
  if (this->delx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->delx());
  }

  // optional int32 delY = 3;
  if (this->dely() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dely());
  }

  // optional int64 upsAcccount = 4;
  if (this->upsacccount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->upsacccount());
  }

  // optional string description = 5;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pkgInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pkgInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const pkgInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const pkgInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pkgInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pkgInfo)
    MergeFrom(*source);
  }
}

void pkgInfo::MergeFrom(const pkgInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pkgInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.packageid() != 0) {
    set_packageid(from.packageid());
  }
  if (from.delx() != 0) {
    set_delx(from.delx());
  }
  if (from.dely() != 0) {
    set_dely(from.dely());
  }
  if (from.upsacccount() != 0) {
    set_upsacccount(from.upsacccount());
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
}

void pkgInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pkgInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pkgInfo::CopyFrom(const pkgInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pkgInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pkgInfo::IsInitialized() const {

  return true;
}

void pkgInfo::Swap(pkgInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void pkgInfo::InternalSwap(pkgInfo* other) {
  std::swap(packageid_, other->packageid_);
  std::swap(delx_, other->delx_);
  std::swap(dely_, other->dely_);
  std::swap(upsacccount_, other->upsacccount_);
  description_.Swap(&other->description_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata pkgInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pkgInfo_descriptor_;
  metadata.reflection = pkgInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// pkgInfo

// optional int64 packageid = 1;
void pkgInfo::clear_packageid() {
  packageid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 pkgInfo::packageid() const {
  // @@protoc_insertion_point(field_get:pkgInfo.packageid)
  return packageid_;
}
 void pkgInfo::set_packageid(::google::protobuf::int64 value) {
  
  packageid_ = value;
  // @@protoc_insertion_point(field_set:pkgInfo.packageid)
}

// optional int32 delX = 2;
void pkgInfo::clear_delx() {
  delx_ = 0;
}
 ::google::protobuf::int32 pkgInfo::delx() const {
  // @@protoc_insertion_point(field_get:pkgInfo.delX)
  return delx_;
}
 void pkgInfo::set_delx(::google::protobuf::int32 value) {
  
  delx_ = value;
  // @@protoc_insertion_point(field_set:pkgInfo.delX)
}

// optional int32 delY = 3;
void pkgInfo::clear_dely() {
  dely_ = 0;
}
 ::google::protobuf::int32 pkgInfo::dely() const {
  // @@protoc_insertion_point(field_get:pkgInfo.delY)
  return dely_;
}
 void pkgInfo::set_dely(::google::protobuf::int32 value) {
  
  dely_ = value;
  // @@protoc_insertion_point(field_set:pkgInfo.delY)
}

// optional int64 upsAcccount = 4;
void pkgInfo::clear_upsacccount() {
  upsacccount_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 pkgInfo::upsacccount() const {
  // @@protoc_insertion_point(field_get:pkgInfo.upsAcccount)
  return upsacccount_;
}
 void pkgInfo::set_upsacccount(::google::protobuf::int64 value) {
  
  upsacccount_ = value;
  // @@protoc_insertion_point(field_set:pkgInfo.upsAcccount)
}

// optional string description = 5;
void pkgInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& pkgInfo::description() const {
  // @@protoc_insertion_point(field_get:pkgInfo.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void pkgInfo::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pkgInfo.description)
}
 void pkgInfo::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pkgInfo.description)
}
 void pkgInfo::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pkgInfo.description)
}
 ::std::string* pkgInfo::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:pkgInfo.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* pkgInfo::release_description() {
  // @@protoc_insertion_point(field_release:pkgInfo.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void pkgInfo::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:pkgInfo.description)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sendTruck::kWhidFieldNumber;
const int sendTruck::kWhXFieldNumber;
const int sendTruck::kWhYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sendTruck::sendTruck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sendTruck)
}

void sendTruck::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

sendTruck::sendTruck(const sendTruck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sendTruck)
}

void sendTruck::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  whid_ = 0;
  whx_ = 0;
  why_ = 0;
}

sendTruck::~sendTruck() {
  // @@protoc_insertion_point(destructor:sendTruck)
  SharedDtor();
}

void sendTruck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sendTruck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sendTruck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sendTruck_descriptor_;
}

const sendTruck& sendTruck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AmazonUPS_2eproto();
  return *default_instance_;
}

sendTruck* sendTruck::default_instance_ = NULL;

sendTruck* sendTruck::New(::google::protobuf::Arena* arena) const {
  sendTruck* n = new sendTruck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void sendTruck::Clear() {
// @@protoc_insertion_point(message_clear_start:sendTruck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(sendTruck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<sendTruck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(whid_, why_);

#undef ZR_HELPER_
#undef ZR_

}

bool sendTruck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sendTruck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 whid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &whid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_whX;
        break;
      }

      // optional int32 whX = 2;
      case 2: {
        if (tag == 16) {
         parse_whX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &whx_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_whY;
        break;
      }

      // optional int32 whY = 3;
      case 3: {
        if (tag == 24) {
         parse_whY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &why_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sendTruck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sendTruck)
  return false;
#undef DO_
}

void sendTruck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sendTruck)
  // optional int32 whid = 1;
  if (this->whid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->whid(), output);
  }

  // optional int32 whX = 2;
  if (this->whx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->whx(), output);
  }

  // optional int32 whY = 3;
  if (this->why() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->why(), output);
  }

  // @@protoc_insertion_point(serialize_end:sendTruck)
}

::google::protobuf::uint8* sendTruck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sendTruck)
  // optional int32 whid = 1;
  if (this->whid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->whid(), target);
  }

  // optional int32 whX = 2;
  if (this->whx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->whx(), target);
  }

  // optional int32 whY = 3;
  if (this->why() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->why(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sendTruck)
  return target;
}

int sendTruck::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sendTruck)
  int total_size = 0;

  // optional int32 whid = 1;
  if (this->whid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->whid());
  }

  // optional int32 whX = 2;
  if (this->whx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->whx());
  }

  // optional int32 whY = 3;
  if (this->why() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->why());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sendTruck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sendTruck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const sendTruck* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const sendTruck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sendTruck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sendTruck)
    MergeFrom(*source);
  }
}

void sendTruck::MergeFrom(const sendTruck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sendTruck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.whid() != 0) {
    set_whid(from.whid());
  }
  if (from.whx() != 0) {
    set_whx(from.whx());
  }
  if (from.why() != 0) {
    set_why(from.why());
  }
}

void sendTruck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sendTruck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sendTruck::CopyFrom(const sendTruck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sendTruck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sendTruck::IsInitialized() const {

  return true;
}

void sendTruck::Swap(sendTruck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sendTruck::InternalSwap(sendTruck* other) {
  std::swap(whid_, other->whid_);
  std::swap(whx_, other->whx_);
  std::swap(why_, other->why_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata sendTruck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sendTruck_descriptor_;
  metadata.reflection = sendTruck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// sendTruck

// optional int32 whid = 1;
void sendTruck::clear_whid() {
  whid_ = 0;
}
 ::google::protobuf::int32 sendTruck::whid() const {
  // @@protoc_insertion_point(field_get:sendTruck.whid)
  return whid_;
}
 void sendTruck::set_whid(::google::protobuf::int32 value) {
  
  whid_ = value;
  // @@protoc_insertion_point(field_set:sendTruck.whid)
}

// optional int32 whX = 2;
void sendTruck::clear_whx() {
  whx_ = 0;
}
 ::google::protobuf::int32 sendTruck::whx() const {
  // @@protoc_insertion_point(field_get:sendTruck.whX)
  return whx_;
}
 void sendTruck::set_whx(::google::protobuf::int32 value) {
  
  whx_ = value;
  // @@protoc_insertion_point(field_set:sendTruck.whX)
}

// optional int32 whY = 3;
void sendTruck::clear_why() {
  why_ = 0;
}
 ::google::protobuf::int32 sendTruck::why() const {
  // @@protoc_insertion_point(field_get:sendTruck.whY)
  return why_;
}
 void sendTruck::set_why(::google::protobuf::int32 value) {
  
  why_ = value;
  // @@protoc_insertion_point(field_set:sendTruck.whY)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int truckArrived::kWhidFieldNumber;
const int truckArrived::kTruckidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

truckArrived::truckArrived()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:truckArrived)
}

void truckArrived::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

truckArrived::truckArrived(const truckArrived& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:truckArrived)
}

void truckArrived::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  whid_ = 0;
  truckid_ = 0;
}

truckArrived::~truckArrived() {
  // @@protoc_insertion_point(destructor:truckArrived)
  SharedDtor();
}

void truckArrived::SharedDtor() {
  if (this != default_instance_) {
  }
}

void truckArrived::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* truckArrived::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return truckArrived_descriptor_;
}

const truckArrived& truckArrived::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AmazonUPS_2eproto();
  return *default_instance_;
}

truckArrived* truckArrived::default_instance_ = NULL;

truckArrived* truckArrived::New(::google::protobuf::Arena* arena) const {
  truckArrived* n = new truckArrived;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void truckArrived::Clear() {
// @@protoc_insertion_point(message_clear_start:truckArrived)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(truckArrived, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<truckArrived*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(whid_, truckid_);

#undef ZR_HELPER_
#undef ZR_

}

bool truckArrived::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:truckArrived)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 whid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &whid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_truckid;
        break;
      }

      // optional int32 truckid = 2;
      case 2: {
        if (tag == 16) {
         parse_truckid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &truckid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:truckArrived)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:truckArrived)
  return false;
#undef DO_
}

void truckArrived::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:truckArrived)
  // optional int32 whid = 1;
  if (this->whid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->whid(), output);
  }

  // optional int32 truckid = 2;
  if (this->truckid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->truckid(), output);
  }

  // @@protoc_insertion_point(serialize_end:truckArrived)
}

::google::protobuf::uint8* truckArrived::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:truckArrived)
  // optional int32 whid = 1;
  if (this->whid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->whid(), target);
  }

  // optional int32 truckid = 2;
  if (this->truckid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->truckid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:truckArrived)
  return target;
}

int truckArrived::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:truckArrived)
  int total_size = 0;

  // optional int32 whid = 1;
  if (this->whid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->whid());
  }

  // optional int32 truckid = 2;
  if (this->truckid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->truckid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void truckArrived::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:truckArrived)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const truckArrived* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const truckArrived>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:truckArrived)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:truckArrived)
    MergeFrom(*source);
  }
}

void truckArrived::MergeFrom(const truckArrived& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:truckArrived)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.whid() != 0) {
    set_whid(from.whid());
  }
  if (from.truckid() != 0) {
    set_truckid(from.truckid());
  }
}

void truckArrived::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:truckArrived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void truckArrived::CopyFrom(const truckArrived& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:truckArrived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool truckArrived::IsInitialized() const {

  return true;
}

void truckArrived::Swap(truckArrived* other) {
  if (other == this) return;
  InternalSwap(other);
}
void truckArrived::InternalSwap(truckArrived* other) {
  std::swap(whid_, other->whid_);
  std::swap(truckid_, other->truckid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata truckArrived::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = truckArrived_descriptor_;
  metadata.reflection = truckArrived_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// truckArrived

// optional int32 whid = 1;
void truckArrived::clear_whid() {
  whid_ = 0;
}
 ::google::protobuf::int32 truckArrived::whid() const {
  // @@protoc_insertion_point(field_get:truckArrived.whid)
  return whid_;
}
 void truckArrived::set_whid(::google::protobuf::int32 value) {
  
  whid_ = value;
  // @@protoc_insertion_point(field_set:truckArrived.whid)
}

// optional int32 truckid = 2;
void truckArrived::clear_truckid() {
  truckid_ = 0;
}
 ::google::protobuf::int32 truckArrived::truckid() const {
  // @@protoc_insertion_point(field_get:truckArrived.truckid)
  return truckid_;
}
 void truckArrived::set_truckid(::google::protobuf::int32 value) {
  
  truckid_ = value;
  // @@protoc_insertion_point(field_set:truckArrived.truckid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int dispatchTruck::kTruckidFieldNumber;
const int dispatchTruck::kPackagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

dispatchTruck::dispatchTruck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dispatchTruck)
}

void dispatchTruck::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

dispatchTruck::dispatchTruck(const dispatchTruck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dispatchTruck)
}

void dispatchTruck::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  truckid_ = 0;
}

dispatchTruck::~dispatchTruck() {
  // @@protoc_insertion_point(destructor:dispatchTruck)
  SharedDtor();
}

void dispatchTruck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dispatchTruck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dispatchTruck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dispatchTruck_descriptor_;
}

const dispatchTruck& dispatchTruck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AmazonUPS_2eproto();
  return *default_instance_;
}

dispatchTruck* dispatchTruck::default_instance_ = NULL;

dispatchTruck* dispatchTruck::New(::google::protobuf::Arena* arena) const {
  dispatchTruck* n = new dispatchTruck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void dispatchTruck::Clear() {
// @@protoc_insertion_point(message_clear_start:dispatchTruck)
  truckid_ = 0;
  packages_.Clear();
}

bool dispatchTruck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dispatchTruck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 truckid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &truckid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_packages;
        break;
      }

      // repeated .pkgInfo packages = 2;
      case 2: {
        if (tag == 18) {
         parse_packages:
          DO_(input->IncrementRecursionDepth());
         parse_loop_packages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_packages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_packages;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dispatchTruck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dispatchTruck)
  return false;
#undef DO_
}

void dispatchTruck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dispatchTruck)
  // optional int32 truckid = 1;
  if (this->truckid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->truckid(), output);
  }

  // repeated .pkgInfo packages = 2;
  for (unsigned int i = 0, n = this->packages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->packages(i), output);
  }

  // @@protoc_insertion_point(serialize_end:dispatchTruck)
}

::google::protobuf::uint8* dispatchTruck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dispatchTruck)
  // optional int32 truckid = 1;
  if (this->truckid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->truckid(), target);
  }

  // repeated .pkgInfo packages = 2;
  for (unsigned int i = 0, n = this->packages_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->packages(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dispatchTruck)
  return target;
}

int dispatchTruck::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dispatchTruck)
  int total_size = 0;

  // optional int32 truckid = 1;
  if (this->truckid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->truckid());
  }

  // repeated .pkgInfo packages = 2;
  total_size += 1 * this->packages_size();
  for (int i = 0; i < this->packages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->packages(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dispatchTruck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dispatchTruck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const dispatchTruck* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const dispatchTruck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dispatchTruck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dispatchTruck)
    MergeFrom(*source);
  }
}

void dispatchTruck::MergeFrom(const dispatchTruck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dispatchTruck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  packages_.MergeFrom(from.packages_);
  if (from.truckid() != 0) {
    set_truckid(from.truckid());
  }
}

void dispatchTruck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dispatchTruck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dispatchTruck::CopyFrom(const dispatchTruck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dispatchTruck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dispatchTruck::IsInitialized() const {

  return true;
}

void dispatchTruck::Swap(dispatchTruck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void dispatchTruck::InternalSwap(dispatchTruck* other) {
  std::swap(truckid_, other->truckid_);
  packages_.UnsafeArenaSwap(&other->packages_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata dispatchTruck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dispatchTruck_descriptor_;
  metadata.reflection = dispatchTruck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// dispatchTruck

// optional int32 truckid = 1;
void dispatchTruck::clear_truckid() {
  truckid_ = 0;
}
 ::google::protobuf::int32 dispatchTruck::truckid() const {
  // @@protoc_insertion_point(field_get:dispatchTruck.truckid)
  return truckid_;
}
 void dispatchTruck::set_truckid(::google::protobuf::int32 value) {
  
  truckid_ = value;
  // @@protoc_insertion_point(field_set:dispatchTruck.truckid)
}

// repeated .pkgInfo packages = 2;
int dispatchTruck::packages_size() const {
  return packages_.size();
}
void dispatchTruck::clear_packages() {
  packages_.Clear();
}
const ::pkgInfo& dispatchTruck::packages(int index) const {
  // @@protoc_insertion_point(field_get:dispatchTruck.packages)
  return packages_.Get(index);
}
::pkgInfo* dispatchTruck::mutable_packages(int index) {
  // @@protoc_insertion_point(field_mutable:dispatchTruck.packages)
  return packages_.Mutable(index);
}
::pkgInfo* dispatchTruck::add_packages() {
  // @@protoc_insertion_point(field_add:dispatchTruck.packages)
  return packages_.Add();
}
::google::protobuf::RepeatedPtrField< ::pkgInfo >*
dispatchTruck::mutable_packages() {
  // @@protoc_insertion_point(field_mutable_list:dispatchTruck.packages)
  return &packages_;
}
const ::google::protobuf::RepeatedPtrField< ::pkgInfo >&
dispatchTruck::packages() const {
  // @@protoc_insertion_point(field_list:dispatchTruck.packages)
  return packages_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int packageDelivered::kPackageidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

packageDelivered::packageDelivered()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:packageDelivered)
}

void packageDelivered::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

packageDelivered::packageDelivered(const packageDelivered& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:packageDelivered)
}

void packageDelivered::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  packageid_ = GOOGLE_LONGLONG(0);
}

packageDelivered::~packageDelivered() {
  // @@protoc_insertion_point(destructor:packageDelivered)
  SharedDtor();
}

void packageDelivered::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packageDelivered::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packageDelivered::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packageDelivered_descriptor_;
}

const packageDelivered& packageDelivered::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AmazonUPS_2eproto();
  return *default_instance_;
}

packageDelivered* packageDelivered::default_instance_ = NULL;

packageDelivered* packageDelivered::New(::google::protobuf::Arena* arena) const {
  packageDelivered* n = new packageDelivered;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void packageDelivered::Clear() {
// @@protoc_insertion_point(message_clear_start:packageDelivered)
  packageid_ = GOOGLE_LONGLONG(0);
}

bool packageDelivered::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:packageDelivered)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 packageid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &packageid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:packageDelivered)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:packageDelivered)
  return false;
#undef DO_
}

void packageDelivered::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:packageDelivered)
  // optional int64 packageid = 1;
  if (this->packageid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->packageid(), output);
  }

  // @@protoc_insertion_point(serialize_end:packageDelivered)
}

::google::protobuf::uint8* packageDelivered::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:packageDelivered)
  // optional int64 packageid = 1;
  if (this->packageid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->packageid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:packageDelivered)
  return target;
}

int packageDelivered::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:packageDelivered)
  int total_size = 0;

  // optional int64 packageid = 1;
  if (this->packageid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->packageid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packageDelivered::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:packageDelivered)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const packageDelivered* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const packageDelivered>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:packageDelivered)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:packageDelivered)
    MergeFrom(*source);
  }
}

void packageDelivered::MergeFrom(const packageDelivered& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:packageDelivered)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.packageid() != 0) {
    set_packageid(from.packageid());
  }
}

void packageDelivered::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:packageDelivered)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packageDelivered::CopyFrom(const packageDelivered& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:packageDelivered)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packageDelivered::IsInitialized() const {

  return true;
}

void packageDelivered::Swap(packageDelivered* other) {
  if (other == this) return;
  InternalSwap(other);
}
void packageDelivered::InternalSwap(packageDelivered* other) {
  std::swap(packageid_, other->packageid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata packageDelivered::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packageDelivered_descriptor_;
  metadata.reflection = packageDelivered_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// packageDelivered

// optional int64 packageid = 1;
void packageDelivered::clear_packageid() {
  packageid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 packageDelivered::packageid() const {
  // @@protoc_insertion_point(field_get:packageDelivered.packageid)
  return packageid_;
}
 void packageDelivered::set_packageid(::google::protobuf::int64 value) {
  
  packageid_ = value;
  // @@protoc_insertion_point(field_set:packageDelivered.packageid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UPStoAmazon::kTruckArrivedFieldNumber;
const int UPStoAmazon::kDeliveredFieldNumber;
const int UPStoAmazon::kUconnectedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UPStoAmazon::UPStoAmazon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UPStoAmazon)
}

void UPStoAmazon::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UPStoAmazon::UPStoAmazon(const UPStoAmazon& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UPStoAmazon)
}

void UPStoAmazon::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

UPStoAmazon::~UPStoAmazon() {
  // @@protoc_insertion_point(destructor:UPStoAmazon)
  SharedDtor();
}

void UPStoAmazon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UPStoAmazon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UPStoAmazon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UPStoAmazon_descriptor_;
}

const UPStoAmazon& UPStoAmazon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AmazonUPS_2eproto();
  return *default_instance_;
}

UPStoAmazon* UPStoAmazon::default_instance_ = NULL;

UPStoAmazon* UPStoAmazon::New(::google::protobuf::Arena* arena) const {
  UPStoAmazon* n = new UPStoAmazon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UPStoAmazon::Clear() {
// @@protoc_insertion_point(message_clear_start:UPStoAmazon)
  truck_arrived_.Clear();
  delivered_.Clear();
  uconnected_.Clear();
}

bool UPStoAmazon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UPStoAmazon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .truckArrived truck_arrived = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_truck_arrived:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_truck_arrived()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_truck_arrived;
        if (input->ExpectTag(18)) goto parse_loop_delivered;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .packageDelivered delivered = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_delivered:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_delivered()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_delivered;
        if (input->ExpectTag(26)) goto parse_loop_uconnected;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .UConnectedToSim uconnected = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_uconnected:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_uconnected()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_uconnected;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UPStoAmazon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UPStoAmazon)
  return false;
#undef DO_
}

void UPStoAmazon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UPStoAmazon)
  // repeated .truckArrived truck_arrived = 1;
  for (unsigned int i = 0, n = this->truck_arrived_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->truck_arrived(i), output);
  }

  // repeated .packageDelivered delivered = 2;
  for (unsigned int i = 0, n = this->delivered_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->delivered(i), output);
  }

  // repeated .UConnectedToSim uconnected = 3;
  for (unsigned int i = 0, n = this->uconnected_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->uconnected(i), output);
  }

  // @@protoc_insertion_point(serialize_end:UPStoAmazon)
}

::google::protobuf::uint8* UPStoAmazon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UPStoAmazon)
  // repeated .truckArrived truck_arrived = 1;
  for (unsigned int i = 0, n = this->truck_arrived_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->truck_arrived(i), false, target);
  }

  // repeated .packageDelivered delivered = 2;
  for (unsigned int i = 0, n = this->delivered_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->delivered(i), false, target);
  }

  // repeated .UConnectedToSim uconnected = 3;
  for (unsigned int i = 0, n = this->uconnected_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->uconnected(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:UPStoAmazon)
  return target;
}

int UPStoAmazon::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:UPStoAmazon)
  int total_size = 0;

  // repeated .truckArrived truck_arrived = 1;
  total_size += 1 * this->truck_arrived_size();
  for (int i = 0; i < this->truck_arrived_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->truck_arrived(i));
  }

  // repeated .packageDelivered delivered = 2;
  total_size += 1 * this->delivered_size();
  for (int i = 0; i < this->delivered_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->delivered(i));
  }

  // repeated .UConnectedToSim uconnected = 3;
  total_size += 1 * this->uconnected_size();
  for (int i = 0; i < this->uconnected_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->uconnected(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UPStoAmazon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UPStoAmazon)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UPStoAmazon* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UPStoAmazon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UPStoAmazon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UPStoAmazon)
    MergeFrom(*source);
  }
}

void UPStoAmazon::MergeFrom(const UPStoAmazon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UPStoAmazon)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  truck_arrived_.MergeFrom(from.truck_arrived_);
  delivered_.MergeFrom(from.delivered_);
  uconnected_.MergeFrom(from.uconnected_);
}

void UPStoAmazon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UPStoAmazon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UPStoAmazon::CopyFrom(const UPStoAmazon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UPStoAmazon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UPStoAmazon::IsInitialized() const {

  return true;
}

void UPStoAmazon::Swap(UPStoAmazon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UPStoAmazon::InternalSwap(UPStoAmazon* other) {
  truck_arrived_.UnsafeArenaSwap(&other->truck_arrived_);
  delivered_.UnsafeArenaSwap(&other->delivered_);
  uconnected_.UnsafeArenaSwap(&other->uconnected_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UPStoAmazon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UPStoAmazon_descriptor_;
  metadata.reflection = UPStoAmazon_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UPStoAmazon

// repeated .truckArrived truck_arrived = 1;
int UPStoAmazon::truck_arrived_size() const {
  return truck_arrived_.size();
}
void UPStoAmazon::clear_truck_arrived() {
  truck_arrived_.Clear();
}
const ::truckArrived& UPStoAmazon::truck_arrived(int index) const {
  // @@protoc_insertion_point(field_get:UPStoAmazon.truck_arrived)
  return truck_arrived_.Get(index);
}
::truckArrived* UPStoAmazon::mutable_truck_arrived(int index) {
  // @@protoc_insertion_point(field_mutable:UPStoAmazon.truck_arrived)
  return truck_arrived_.Mutable(index);
}
::truckArrived* UPStoAmazon::add_truck_arrived() {
  // @@protoc_insertion_point(field_add:UPStoAmazon.truck_arrived)
  return truck_arrived_.Add();
}
::google::protobuf::RepeatedPtrField< ::truckArrived >*
UPStoAmazon::mutable_truck_arrived() {
  // @@protoc_insertion_point(field_mutable_list:UPStoAmazon.truck_arrived)
  return &truck_arrived_;
}
const ::google::protobuf::RepeatedPtrField< ::truckArrived >&
UPStoAmazon::truck_arrived() const {
  // @@protoc_insertion_point(field_list:UPStoAmazon.truck_arrived)
  return truck_arrived_;
}

// repeated .packageDelivered delivered = 2;
int UPStoAmazon::delivered_size() const {
  return delivered_.size();
}
void UPStoAmazon::clear_delivered() {
  delivered_.Clear();
}
const ::packageDelivered& UPStoAmazon::delivered(int index) const {
  // @@protoc_insertion_point(field_get:UPStoAmazon.delivered)
  return delivered_.Get(index);
}
::packageDelivered* UPStoAmazon::mutable_delivered(int index) {
  // @@protoc_insertion_point(field_mutable:UPStoAmazon.delivered)
  return delivered_.Mutable(index);
}
::packageDelivered* UPStoAmazon::add_delivered() {
  // @@protoc_insertion_point(field_add:UPStoAmazon.delivered)
  return delivered_.Add();
}
::google::protobuf::RepeatedPtrField< ::packageDelivered >*
UPStoAmazon::mutable_delivered() {
  // @@protoc_insertion_point(field_mutable_list:UPStoAmazon.delivered)
  return &delivered_;
}
const ::google::protobuf::RepeatedPtrField< ::packageDelivered >&
UPStoAmazon::delivered() const {
  // @@protoc_insertion_point(field_list:UPStoAmazon.delivered)
  return delivered_;
}

// repeated .UConnectedToSim uconnected = 3;
int UPStoAmazon::uconnected_size() const {
  return uconnected_.size();
}
void UPStoAmazon::clear_uconnected() {
  uconnected_.Clear();
}
const ::UConnectedToSim& UPStoAmazon::uconnected(int index) const {
  // @@protoc_insertion_point(field_get:UPStoAmazon.uconnected)
  return uconnected_.Get(index);
}
::UConnectedToSim* UPStoAmazon::mutable_uconnected(int index) {
  // @@protoc_insertion_point(field_mutable:UPStoAmazon.uconnected)
  return uconnected_.Mutable(index);
}
::UConnectedToSim* UPStoAmazon::add_uconnected() {
  // @@protoc_insertion_point(field_add:UPStoAmazon.uconnected)
  return uconnected_.Add();
}
::google::protobuf::RepeatedPtrField< ::UConnectedToSim >*
UPStoAmazon::mutable_uconnected() {
  // @@protoc_insertion_point(field_mutable_list:UPStoAmazon.uconnected)
  return &uconnected_;
}
const ::google::protobuf::RepeatedPtrField< ::UConnectedToSim >&
UPStoAmazon::uconnected() const {
  // @@protoc_insertion_point(field_list:UPStoAmazon.uconnected)
  return uconnected_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AmazontoUPS::kSendTruckFieldNumber;
const int AmazontoUPS::kDispatchTruckFieldNumber;
const int AmazontoUPS::kAconnectedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AmazontoUPS::AmazontoUPS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AmazontoUPS)
}

void AmazontoUPS::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AmazontoUPS::AmazontoUPS(const AmazontoUPS& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AmazontoUPS)
}

void AmazontoUPS::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

AmazontoUPS::~AmazontoUPS() {
  // @@protoc_insertion_point(destructor:AmazontoUPS)
  SharedDtor();
}

void AmazontoUPS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AmazontoUPS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AmazontoUPS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AmazontoUPS_descriptor_;
}

const AmazontoUPS& AmazontoUPS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AmazonUPS_2eproto();
  return *default_instance_;
}

AmazontoUPS* AmazontoUPS::default_instance_ = NULL;

AmazontoUPS* AmazontoUPS::New(::google::protobuf::Arena* arena) const {
  AmazontoUPS* n = new AmazontoUPS;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AmazontoUPS::Clear() {
// @@protoc_insertion_point(message_clear_start:AmazontoUPS)
  send_truck_.Clear();
  dispatch_truck_.Clear();
  aconnected_.Clear();
}

bool AmazontoUPS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AmazontoUPS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sendTruck send_truck = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_send_truck:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_send_truck()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_send_truck;
        if (input->ExpectTag(18)) goto parse_loop_dispatch_truck;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .dispatchTruck dispatch_truck = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_dispatch_truck:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_dispatch_truck()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_dispatch_truck;
        if (input->ExpectTag(26)) goto parse_loop_aconnected;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .AConnectedToSim aconnected = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_aconnected:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_aconnected()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_aconnected;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AmazontoUPS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AmazontoUPS)
  return false;
#undef DO_
}

void AmazontoUPS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AmazontoUPS)
  // repeated .sendTruck send_truck = 1;
  for (unsigned int i = 0, n = this->send_truck_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->send_truck(i), output);
  }

  // repeated .dispatchTruck dispatch_truck = 2;
  for (unsigned int i = 0, n = this->dispatch_truck_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dispatch_truck(i), output);
  }

  // repeated .AConnectedToSim aconnected = 3;
  for (unsigned int i = 0, n = this->aconnected_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->aconnected(i), output);
  }

  // @@protoc_insertion_point(serialize_end:AmazontoUPS)
}

::google::protobuf::uint8* AmazontoUPS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AmazontoUPS)
  // repeated .sendTruck send_truck = 1;
  for (unsigned int i = 0, n = this->send_truck_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->send_truck(i), false, target);
  }

  // repeated .dispatchTruck dispatch_truck = 2;
  for (unsigned int i = 0, n = this->dispatch_truck_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->dispatch_truck(i), false, target);
  }

  // repeated .AConnectedToSim aconnected = 3;
  for (unsigned int i = 0, n = this->aconnected_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->aconnected(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:AmazontoUPS)
  return target;
}

int AmazontoUPS::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AmazontoUPS)
  int total_size = 0;

  // repeated .sendTruck send_truck = 1;
  total_size += 1 * this->send_truck_size();
  for (int i = 0; i < this->send_truck_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->send_truck(i));
  }

  // repeated .dispatchTruck dispatch_truck = 2;
  total_size += 1 * this->dispatch_truck_size();
  for (int i = 0; i < this->dispatch_truck_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dispatch_truck(i));
  }

  // repeated .AConnectedToSim aconnected = 3;
  total_size += 1 * this->aconnected_size();
  for (int i = 0; i < this->aconnected_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->aconnected(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AmazontoUPS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AmazontoUPS)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AmazontoUPS* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AmazontoUPS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AmazontoUPS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AmazontoUPS)
    MergeFrom(*source);
  }
}

void AmazontoUPS::MergeFrom(const AmazontoUPS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AmazontoUPS)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  send_truck_.MergeFrom(from.send_truck_);
  dispatch_truck_.MergeFrom(from.dispatch_truck_);
  aconnected_.MergeFrom(from.aconnected_);
}

void AmazontoUPS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AmazontoUPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AmazontoUPS::CopyFrom(const AmazontoUPS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AmazontoUPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AmazontoUPS::IsInitialized() const {

  return true;
}

void AmazontoUPS::Swap(AmazontoUPS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AmazontoUPS::InternalSwap(AmazontoUPS* other) {
  send_truck_.UnsafeArenaSwap(&other->send_truck_);
  dispatch_truck_.UnsafeArenaSwap(&other->dispatch_truck_);
  aconnected_.UnsafeArenaSwap(&other->aconnected_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AmazontoUPS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AmazontoUPS_descriptor_;
  metadata.reflection = AmazontoUPS_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AmazontoUPS

// repeated .sendTruck send_truck = 1;
int AmazontoUPS::send_truck_size() const {
  return send_truck_.size();
}
void AmazontoUPS::clear_send_truck() {
  send_truck_.Clear();
}
const ::sendTruck& AmazontoUPS::send_truck(int index) const {
  // @@protoc_insertion_point(field_get:AmazontoUPS.send_truck)
  return send_truck_.Get(index);
}
::sendTruck* AmazontoUPS::mutable_send_truck(int index) {
  // @@protoc_insertion_point(field_mutable:AmazontoUPS.send_truck)
  return send_truck_.Mutable(index);
}
::sendTruck* AmazontoUPS::add_send_truck() {
  // @@protoc_insertion_point(field_add:AmazontoUPS.send_truck)
  return send_truck_.Add();
}
::google::protobuf::RepeatedPtrField< ::sendTruck >*
AmazontoUPS::mutable_send_truck() {
  // @@protoc_insertion_point(field_mutable_list:AmazontoUPS.send_truck)
  return &send_truck_;
}
const ::google::protobuf::RepeatedPtrField< ::sendTruck >&
AmazontoUPS::send_truck() const {
  // @@protoc_insertion_point(field_list:AmazontoUPS.send_truck)
  return send_truck_;
}

// repeated .dispatchTruck dispatch_truck = 2;
int AmazontoUPS::dispatch_truck_size() const {
  return dispatch_truck_.size();
}
void AmazontoUPS::clear_dispatch_truck() {
  dispatch_truck_.Clear();
}
const ::dispatchTruck& AmazontoUPS::dispatch_truck(int index) const {
  // @@protoc_insertion_point(field_get:AmazontoUPS.dispatch_truck)
  return dispatch_truck_.Get(index);
}
::dispatchTruck* AmazontoUPS::mutable_dispatch_truck(int index) {
  // @@protoc_insertion_point(field_mutable:AmazontoUPS.dispatch_truck)
  return dispatch_truck_.Mutable(index);
}
::dispatchTruck* AmazontoUPS::add_dispatch_truck() {
  // @@protoc_insertion_point(field_add:AmazontoUPS.dispatch_truck)
  return dispatch_truck_.Add();
}
::google::protobuf::RepeatedPtrField< ::dispatchTruck >*
AmazontoUPS::mutable_dispatch_truck() {
  // @@protoc_insertion_point(field_mutable_list:AmazontoUPS.dispatch_truck)
  return &dispatch_truck_;
}
const ::google::protobuf::RepeatedPtrField< ::dispatchTruck >&
AmazontoUPS::dispatch_truck() const {
  // @@protoc_insertion_point(field_list:AmazontoUPS.dispatch_truck)
  return dispatch_truck_;
}

// repeated .AConnectedToSim aconnected = 3;
int AmazontoUPS::aconnected_size() const {
  return aconnected_.size();
}
void AmazontoUPS::clear_aconnected() {
  aconnected_.Clear();
}
const ::AConnectedToSim& AmazontoUPS::aconnected(int index) const {
  // @@protoc_insertion_point(field_get:AmazontoUPS.aconnected)
  return aconnected_.Get(index);
}
::AConnectedToSim* AmazontoUPS::mutable_aconnected(int index) {
  // @@protoc_insertion_point(field_mutable:AmazontoUPS.aconnected)
  return aconnected_.Mutable(index);
}
::AConnectedToSim* AmazontoUPS::add_aconnected() {
  // @@protoc_insertion_point(field_add:AmazontoUPS.aconnected)
  return aconnected_.Add();
}
::google::protobuf::RepeatedPtrField< ::AConnectedToSim >*
AmazontoUPS::mutable_aconnected() {
  // @@protoc_insertion_point(field_mutable_list:AmazontoUPS.aconnected)
  return &aconnected_;
}
const ::google::protobuf::RepeatedPtrField< ::AConnectedToSim >&
AmazontoUPS::aconnected() const {
  // @@protoc_insertion_point(field_list:AmazontoUPS.aconnected)
  return aconnected_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
